Parameters Sets 
================

Background
-----------

The basic object in ``atlas`` is a ``parameter`` and the ``parameter
space`` parametrizes both, the irreducible representations of a
reductive algebraic group as well as the standard modules. In other
words, for each ``p`` in the ``parameter space`` there is an
irreducible module ``J(p)`` and a standard module ``I(p)`` associated
to ``p``. Namely ``I(p)`` is representation induced from a limit of discrete
series and things are set up, following Langlands classification, so that this standard module has a unique irrudicible quotient. This quotient is also parametrized by the same parameter ``p``.

So this parameter space is the basic object behind this classification theory. 

In Adams and DuCloux paper, "Algorithms for representations of real
groups", section 1,  the authors use Langlands classification to describe the
algorithm that will associate, to each real group, the parameter space
in question.

More precisely, for each real group G(R), the representations with fixed (regular)
infinitesimal character ``lambda`` are parametrized by
``(G(R))``-orbits) of pairs ``(H(R),chi)``; where H(R) is a Cartan
subgroup of G(R) and chi is a character of H(R) so that the
differential of ``chi=lambda`` up to ``G(C)`` conjugacy.


Parameter sets for ``SL(2,R)``
-------------------------------

Let's look at ``G=SL(2,R)`` and representations with infinitesimal character ``rho`` How many are there? We need to look at conjugacy classes of cartans and their characters.

Let's review a few things we know about ``G``::

      atlas> G:=SL(2,R)
      Value: connected split real group with Lie algebra 'sl(2,R)'
      
      atlas> root_datum (G)
      Value: simply connected root datum of Lie type 'A1'
      atlas> simple_roots(G)
      Value: 
      | 2 |
      
      atlas> rho(G)
      Value: [ 1 ]/1

      atlas> nr_of_Cartan_classes (G)
      Value: 2

      atlas> void: for H in Cartan_classes (G) do prints(H) od 
      Cartan class #0, occurring for 2 real forms and for 1 dual real form
      Cartan class #1, occurring for 1 real form and for 2 dual real forms
      atlas>

      atlas> set T= Cartan_classes (G)[0]
      Identifier T: CartanClass
      atlas> T
      Value: Cartan class #0, occurring for 2 real forms and for 1 dual real form
      atlas> set A= Cartan_classes (G)[1]
      Identifier A: CartanClass (hiding previous one of type mat)
      atlas> A
      Value: Cartan class #1, occurring for 1 real form and for 2 dual real forms
      atlas> 


      atlas> occurrence_matrix (G)
      Value: 
      | 1, 0 |
      | 1, 1 |

      atlas> void: for H in real_forms (G) do prints(H) od
      compact connected real group with Lie algebra 'su(2)'
      connected split real group with Lie algebra 'sl(2,R)'
      atlas>


So, the split form of type A1 has two Cartans, the compact one, ``T=S^1`` and the split one, ``A=R^x``. 

Now, the characters for ``T`` are of the form ``e^ik\theta with k in Z.
The ones corresponding to ``rho`` are ``{{e^i\theta}, e^{-i\theta}}`` and they
are not conjugate under the Weyl group of ``T``, since -1 is not in
it.

On the other hand, for ``A=R^x``, the characters whose differential is equal to ``rho`` are ``{x--> x, x^{-1},|x|, |x|^{-1}}``, where |x|=sign(x)*x.

In this case -1 is in the Weyl group of A. So, up to conjugacy, we have that {\chi}= {x, |x|}.

This says that we have exactly three representations of ``SL(2,R)`` with infinitesimal character ``rho``; two from each Cartan.

Let us look for those representations of ``G``. The command ``parameters_gamma (G,[1])`` looks for all the parameters of ``G`` with that infinitesimal character ``[1]``::

    atlas> set P=all_parameters_gamma (G,[1])
    Identifier P: [Param]
    atlas> #P
    Value: 4
    atlas>     
    atlas> void: for p in P do prints(p) od
    final parameter (x=0,lambda=[1]/1,nu=[0]/1)
    final parameter (x=1,lambda=[1]/1,nu=[0]/1)
    final parameter (x=2,lambda=[1]/1,nu=[1]/1)
    final parameter (x=2,lambda=[2]/1,nu=[1]/1)
    atlas>

This is the parameter set for ``SL(2,R)``. Each parameter is a
triple. ``(x, lambda, nu)``. We will explain each of these later. But
for now we can say that the representation theory of ``SL(2,R)`` tells
us that there are four representations with infinitessimal character
``rho``. Two of them are the discrete series associated to the Cartan
``T`` and corresponding to the two parameters above with ``nu=0``; the trivial representation and an irreducible principal series, attached to the Cartan ``A`` and corresponding to the parameters with ``nu=1``

We will say more about this later. But first we can look at characters for simpler groups.

Characters of Tori
-------------------

To study characters of Tori we first need to know how ``atlas``
understands what a torus is. In order to specify which torus we want
we use the command ``torus``. There are two ways of using this
command::

	atlas> whattype torus ?
	Overloaded instances of 'torus'
	  (int,int,int)->RealForm
	  CartanClass->RealForm
 	atlas>

	atlas> set H=torus(1,0,0)
	Identifier H: RealForm (hiding previous one of type string (constant))
	atlas> H
	Value: compact connected quasisplit real group with Lie algebra 'u(1)'
	atlas> set H=torus(0,1,0)
	Identifier H: RealForm (hiding previous one of type RealForm)
	atlas> H
	Value: connected quasisplit real group with Lie algebra 'gl(1,C)'
	atlas>  H:=torus(0,0,1)
	Value: disconnected split real group with Lie algebra 'gl(1,R)'
	atlas>

	atlas> H:=torus(1,2,3) 
	Value: disconnected quasisplit real group with Lie algebra
	'u(1).gl(1,C).gl(1,C).gl(1,R).gl(1,R).gl(1,R)' 
	atlas>

So, the command ``torus(a,b,c)`` specifys a torus with ``a`` circle
factors ``S^1``, ``b`` ``C^x`` factors and ``c`` ``R^x`` factors.

Starting with the circle, let us discuss its representations. From the thoery we know that they are parametrized by integers. So, starting from the trivial representation we can see how the software parametrizes them::

	 atlas>  H:=torus(1,0,0)
	 Value: compact connected quasisplit real group with Lie algebra 'u(1)'
	 atlas> set p=trivial(H)
	 Identifier p: Param
	 atlas> p
	 Value: final parameter (x=0,lambda=[0]/1,nu=[0]/1)
	 atlas>

So this is the parameter for the trivial representation. The first element ``x`` is a KGB element. But it is not important for now. Let us see what involution it corresponds to::

   atlas> set x=x(p)
   Identifier x: KGBElt (hiding previous one of type int)
   atlas> set theta=involution(x)
   Identifier theta: mat
   atlas> theta
   Value: 
   | 1 |

   atlas> 

So in this case it is the identity involution. That is the torus has a Cartan involution whose information is encoded in this element ``x`` and in the case of a compact torus it is the identity.

Now to understand the rest of the parameters, suppose that ``H`` is a
complex torus with Cartan involution theta, and defined over R. Let
``H(R)`` be the corresponding real group. Denote by ``X^*(H)`` the
characters of H(R). Then the characters of H(R) are parametrized by
(theta, gamma, lambda). Here ``gamma`` is the differential of the
character and ``lambda`` is the restriction of the character to
``H^theta``.

The real points are not necessarily connected. So we need to specify not only the differential but also information of the disconnected part which is encoded in the estriction to ``H^theta``.

The basic fact is that the characters of ``H^theta`` are parametrized by
``X^*/(1-theta)X^*``.

So the characters of ``H(R)`` are parametrized by (theta, lambda, nu)
where ``lambda`` is in ``X^*/(1-theta)X^*``and ``nu`` is in ``[X^*\otimes
Q]^{-theta}``
 
So ``lambda`` is a character on ``H^theta`` and ``nu`` gives the
character on the Lie algebra of ``A=H^theta``.

In the case of the circle, ``lambda`` is in ``Z/(1-theta)Z=Z``, since
``theta=1`` and ``nu`` is in ``Q^{-1}=0``, So the parameter for these
character is ``(x=0,lambda, nu=0)`` and there is one for each lambda in
``Z`` correspondintg to the character ``e^{i lambda} t``. 

In the case of the trivial character the parameter is::

   atlas> p
   Value: final parameter (x=0,lambda=[0]/1,nu=[0]/1)
   atlas>

And for the character ``e^{i 3} t``::

   atlas> set q=parameter(x,[3],[0])
   Identifier q: Param (hiding previous one of type vec (constant))
   atlas> q
   Value: final parameter (x=0,lambda=[3]/1,nu=[0]/1)
   atlas>


